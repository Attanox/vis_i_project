{"version":3,"sources":["shared/constants.ts","hooks/usePreprocessData.ts","hooks/useMetricByCountry.ts","hooks/useColorScale.ts","components/Map/Map.tsx","components/dropdown/Dropdown.tsx","hooks/useHappinessYears.ts","hooks/useD3.ts","components/Barchart/Barchart.tsx","hooks/useHappinessSum.ts","components/Piechart/Piechart.tsx","App.tsx","index.tsx"],"names":["YEARS","COLORS","retroBG","backgroundColor","backgroundImage","backgroundSize","usePreprocessData","React","useState","data","setData","useEffect","joined","result","forEach","y","a","d3","createJoinedDataset","useMetricByCountry","year","metricByCountry","setMetricByCountry","mbc","d","Country","useColorScale","colorScale","setColorScale","change","setChange","metricValues","Object","values","metricValueExtent","maxChange","minChange","console","log","newColorScale","domain","Number","range","call","min","toFixed","max","SPHERE","type","Map","props","tooltipRef","useRef","countryNameAccessor","properties","name","dimensions","width","window","innerWidth","height","margin","top","bottom","left","right","boundedHeight","boundedWidth","projection","fitWidth","pathGenerator","bounds","y1","getMapProperties","legendGradientID","onCountryLeave","current","style","opacity","id","ref","className","transform","fill","stroke","strokeWidth","strokeLinejoin","countries","features","map","i","metricValue","undefined","color","onClick","countryName","setCountry","onMouseEnter","e","target","innerHTML","parseFloat","centroid","centerX","centerY","x","onCountryEnter","onMouseLeave","stopColor","offset","Dropdown","selected","setSelected","passedYear","bg","borderColor","placeholder","onChange","val","value","onSelect","useHappinessYears","country","happinessYears","setHappinessYears","keys","correctCountry","find","push","score","Score","useD3","renderChartFn","dependencies","Barchart","chartWidth","getDimensions","xAccessor","yAccessor","getClass","selectAll","attr","svgRef","svg","xScale","rangeRound","padding","yScale","xExtent","xTicks","filter","v","yExtent","yTicks","select","g","tickValues","t","tickSizeOuter","remove","join","bandwidth","on","newYear","replace","setYear","as","size","useHappinessSum","happinessSum","setHappinessSum","sum","components","needed","n","label","original_value","Piechart","innerRadius","outerRadius","metricAccessor","interpolator","arcGenerator","padAngle","padRadius","cornerRadius","pieGenerator","arc","enter","append","_","text","length","boxStyles","display","flexDirection","justifyContent","alignItems","borderRadius","App","theme","extendTheme","styles","global","textAlign","fontWeight","fontSize","flex","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8996fd10.chunk.js","sourcesContent":["export const YEARS = [\"2015\", \"2016\", \"2017\", \"2018\", \"2019\"];\n\nexport const COLORS = {\n  primary: \"#376EBB\",\n  secondary: \"#8DCEF6\",\n  text: \"#463795\",\n  highlight: \"#F88BC4\",\n  background: \"#E2CCFF\",\n};\n\nexport const retroBG = {\n  backgroundColor: \"none\",\n  backgroundImage: `linear-gradient(90deg, rgba(255, 255, 255, 0.25) 50%, transparent 50%)`,\n  backgroundSize: \"4px\",\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { YEARS } from \"shared/constants\";\nimport { HappinessDataset } from \"types\";\n\nconst usePreprocessData = (): { data: HappinessDataset } => {\n  const [data, setData] = React.useState({});\n\n  const createJoinedDataset = () => {\n    const result: { [year: string]: any } = {};\n\n    YEARS.forEach(async (y) => (result[y] = await d3.csv(`./static/${y}.csv`)));\n\n    return result;\n  };\n\n  React.useEffect(() => {\n    const joined = createJoinedDataset();\n    setData(joined);\n  }, []);\n\n  return { data };\n};\n\nexport default usePreprocessData;\n","import React from \"react\";\nimport { HappinessDataset } from \"types\";\n\nconst useMetricByCountry = (year: string, data: HappinessDataset) => {\n  const metric = \"Score\";\n\n  const [metricByCountry, setMetricByCountry] = React.useState<{\n    [country: string]: string;\n  }>({});\n\n  React.useEffect(() => {\n    if (year) {\n      const mbc: { [country: string]: string } = {};\n\n      data[year]?.forEach((d) => {\n        mbc[d.Country] = d[metric];\n      });\n\n      setMetricByCountry(mbc);\n    }\n  }, [year, data]);\n\n  return { metricByCountry };\n};\n\nexport default useMetricByCountry;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { COLORS } from \"shared/constants\";\n\nconst useColorScale = (metricByCountry: { [country: string]: string }) => {\n  const [colorScale, setColorScale] = React.useState<any>();\n  const [change, setChange] = React.useState<{ min: string; max: string }>();\n\n  React.useEffect(() => {\n    const metricValues = Object.values(metricByCountry);\n\n    const metricValueExtent = d3.extent(metricValues);\n\n    if (metricValueExtent[0] && metricValueExtent[1]) {\n      const maxChange = d3.max([metricValueExtent[0], metricValueExtent[1]]);\n      const minChange = d3.min([metricValueExtent[0], metricValueExtent[1]]);\n      console.log({ minChange, maxChange });\n\n      if (maxChange && minChange) {\n        const newColorScale = d3\n          .scaleLinear<string>()\n          .domain([Number(minChange), Number(maxChange)])\n          .range([COLORS.highlight, COLORS.text]);\n\n        setColorScale({ call: newColorScale });\n        setChange({\n          min: Number(minChange).toFixed(2),\n          max: Number(maxChange).toFixed(2),\n        });\n      }\n    }\n  }, [metricByCountry]);\n\n  return { colorScale, change };\n};\n\nexport default useColorScale;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nimport usePreprocessData from \"hooks/usePreprocessData\";\n\nimport { Feature } from \"geojson\";\nimport { Dimensions } from \"types\";\n\nimport countries from \"./world.geo.json\";\n\nimport \"./Map.css\";\nimport useMetricByCountry from \"hooks/useMetricByCountry\";\nimport useColorScale from \"hooks/useColorScale\";\nimport { COLORS } from \"shared/constants\";\n\nconst SPHERE = { type: \"Sphere\" };\n\nconst getMapProperties = () => {\n  const dimensions: Dimensions = {\n    width: window.innerWidth * 0.6,\n    height: 0,\n    margin: {\n      top: 10,\n      bottom: 10,\n      left: 10,\n      right: 10,\n    },\n    boundedHeight: 0,\n    boundedWidth: 0,\n  };\n\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n\n  const projection = d3\n    .geoEqualEarth()\n    .fitWidth(dimensions.boundedWidth, SPHERE as Feature);\n\n  const pathGenerator = d3.geoPath(projection);\n  const [[x0, y0], [x1, y1]] = pathGenerator.bounds(SPHERE as Feature);\n\n  dimensions.boundedHeight = y1;\n  dimensions.height = y1 + dimensions.margin.top + dimensions.margin.bottom;\n\n  return { dimensions, pathGenerator };\n};\n\nconst Map = (props: { year: string; setCountry: (c: string) => void }) => {\n  const tooltipRef = React.useRef<HTMLDivElement>(null);\n\n  const countryNameAccessor = (d: any) => d.properties.name;\n\n  const { data } = usePreprocessData();\n\n  const { dimensions, pathGenerator } = getMapProperties();\n\n  const { metricByCountry } = useMetricByCountry(props.year, data);\n\n  const { colorScale, change } = useColorScale(metricByCountry);\n\n  const onCountryClick = (countryName: string) => {\n    props.setCountry(countryName);\n  };\n\n  const legendGradientID = \"legendGradientID\";\n\n  const onCountryEnter = (e: any, d: any) => {\n    if (tooltipRef.current) {\n      const metricValue = metricByCountry[e.target.id];\n\n      tooltipRef.current.innerHTML = `\n        <span>${e.target.id}</span><br />\n        <span>${metricValue ? parseFloat(metricValue).toFixed(2) : \"\"}</span>\n      `;\n\n      const [centerX, centerY] = pathGenerator.centroid(d);\n\n      const x =\n        centerX + dimensions.margin.left - dimensions.boundedWidth * 0.44;\n      const y =\n        centerY + dimensions.margin.top - dimensions.boundedHeight * 0.44;\n\n      tooltipRef.current.style.transform = `translate(calc( -50% + ${x}px), calc(-100% + ${y}px))`;\n\n      // tooltipRef.current.style.left = `${x}px`;\n      // tooltipRef.current.style.top = `${metricValue ? y + 210 : y + 250}px`;\n\n      tooltipRef.current.style.opacity = \"1\";\n    }\n  };\n  const onCountryLeave = () => {\n    if (tooltipRef.current) tooltipRef.current.style.opacity = \"0\";\n  };\n\n  if (!pathGenerator) return null;\n\n  return (\n    <>\n      <div id=\"map-tooltip\" ref={tooltipRef}>\n        This is a tool tip!\n      </div>\n      <svg id=\"map-wrapper\" width={dimensions.width} height={dimensions.height}>\n        <g\n          className=\"map-bounds\"\n          style={{\n            transform: `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`,\n          }}\n        >\n          <path\n            className=\"map-earth-base\"\n            d={pathGenerator(SPHERE as Feature) as string | undefined}\n            fill={`${COLORS.background}`}\n            style={{\n              stroke: COLORS.background,\n              strokeWidth: `1px`,\n              strokeLinejoin: \"round\",\n            }}\n          />\n\n          {countries.features.map((d, i) => {\n            const metricValue = Number(metricByCountry[countryNameAccessor(d)]);\n\n            const fill =\n              typeof metricValue === undefined || !colorScale?.call\n                ? { color: \"aliceblue\" }\n                : { color: colorScale.call(metricValue) };\n\n            return (\n              <path\n                key={`map-country-${i}`}\n                d={pathGenerator(d as any) as string | undefined}\n                className=\"country\"\n                id={countryNameAccessor(d)}\n                fill={fill.color || \"aliceblue\"}\n                stroke=\"aliceblue\"\n                strokeWidth={0.5}\n                onClick={() => onCountryClick(countryNameAccessor(d))}\n                onMouseEnter={(e) => onCountryEnter(e, d)}\n                onMouseLeave={onCountryLeave}\n              />\n            );\n          })}\n        </g>\n        {props.year ? (\n          <g\n            className=\"map-legend\"\n            style={{\n              transform: `translate(${80}px, ${\n                dimensions.width < 800\n                  ? dimensions.boundedHeight - 30\n                  : dimensions.boundedHeight * 0.5\n              }px)`,\n              color: \"#333\",\n            }}\n          >\n            <text y={-23} className=\"map-legend-title\">\n              Happiness score\n            </text>\n            <text x={-23} y={13}>\n              {change ? change.min : \"\"}\n            </text>\n            <text x={105} y={13}>\n              {change ? change.max : \"\"}\n            </text>\n            <rect\n              x={10}\n              height={16}\n              width={90}\n              fill={`url(#${legendGradientID})`}\n            ></rect>\n          </g>\n        ) : null}\n        <defs>\n          <linearGradient id={legendGradientID}>\n            <stop stopColor={`${COLORS.highlight}`} offset=\"0%\"></stop>\n            <stop stopColor={`${COLORS.text}`} offset=\"100%\"></stop>\n          </linearGradient>\n        </defs>\n      </svg>\n    </>\n  );\n};\n\nexport default Map;\n","import React, { ChangeEvent } from \"react\";\n\nimport { Select } from \"@chakra-ui/select\";\nimport { COLORS, YEARS } from \"shared/constants\";\n\nconst Dropdown = (props: {\n  onSelect: (y: string) => void;\n  passedYear: string;\n}) => {\n  const [selected, setSelected] = React.useState<string>(\"\");\n\n  React.useEffect(() => {\n    setSelected(props.passedYear);\n  }, [props.passedYear]);\n\n  const onChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const val = e.target.value;\n\n    props.onSelect(val);\n\n    setSelected(val);\n  };\n\n  return (\n    <Select\n      bg={`${COLORS.text}`}\n      borderColor={`${COLORS.text}`}\n      color={`#fff`}\n      placeholder=\"Select year of happiness\"\n      onChange={onChange}\n      value={selected}\n      width={\"250px\"}\n    >\n      {YEARS.map((y, i) => (\n        <option key={i} style={{ color: COLORS.text }} value={y}>\n          {y}\n        </option>\n      ))}\n    </Select>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport { HappinessDataset, HappinessYear } from \"types\";\n\nconst useHappinessYears = (country: string, data: HappinessDataset) => {\n  const [happinessYears, setHappinessYears] = React.useState<HappinessYear[]>(\n    []\n  );\n\n  React.useEffect(() => {\n    const result: HappinessYear[] = [];\n    Object.keys(data).forEach((year) => {\n      const correctCountry = data[year].find((d) => d.Country === country);\n\n      if (correctCountry) {\n        result.push({ year, score: correctCountry.Score });\n      }\n    });\n\n    setHappinessYears(result);\n  }, [country, data]);\n\n  return { happinessYears };\n};\n\nexport default useHappinessYears;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport const useD3 = (renderChartFn: Function, dependencies: any[] = []) => {\n  const ref = React.useRef<any>();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n\n  return ref;\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nimport usePreprocessData from \"hooks/usePreprocessData\";\n\nimport { Dimensions, HappinessYear } from \"types\";\n\nimport \"./Barchart.css\";\nimport useHappinessYears from \"hooks/useHappinessYears\";\nimport { useD3 } from \"hooks/useD3\";\nimport { COLORS } from \"shared/constants\";\nimport { Heading } from \"@chakra-ui/layout\";\n\nconst getDimensions = () => {\n  const chartWidth = window.innerWidth * 0.3;\n\n  const dimensions: Dimensions = {\n    width: chartWidth,\n    height: chartWidth * 0.4,\n    boundedWidth: 0,\n    boundedHeight: 0,\n    margin: {\n      left: 10,\n      right: 10,\n      top: 10,\n      bottom: 50,\n    },\n  };\n\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  return dimensions;\n};\n\nconst Barchart = (props: {\n  country: string;\n  year: string;\n  setYear: (year: string) => void;\n}) => {\n  const dimensions = getDimensions();\n\n  const { data } = usePreprocessData();\n\n  const { happinessYears } = useHappinessYears(props.country, data);\n\n  const xAccessor = (d: HappinessYear) => d.year;\n  const yAccessor = (d: HappinessYear) => d.score;\n\n  const getClass = (d: HappinessYear, year: string) => {\n    return d.year === year ? \"current bar\" : \"bar\";\n  };\n\n  React.useEffect(() => {\n    d3.select(\".barchart-bounds\")\n      .selectAll(\".bar\")\n      .data(happinessYears)\n      .attr(\"class\", (d: HappinessYear) => getClass(d, props.year));\n  }, [props.year, happinessYears]);\n\n  const svgRef = useD3(\n    (svg: any) => {\n      const xScale = d3\n        .scaleBand()\n        .domain(happinessYears.map(xAccessor))\n        .rangeRound([dimensions.margin.left, dimensions.boundedWidth])\n        .padding(0.1);\n\n      const yScale = d3\n        .scaleLinear()\n        .domain([0, Number(d3.max(happinessYears, yAccessor))])\n        .range([dimensions.boundedHeight, dimensions.margin.top]);\n\n      const xExtent = d3.extent(xScale.domain());\n      const xTicks = d3\n        .ticks(\n          Number(xExtent[0]),\n          Number(xExtent[1]),\n          dimensions.boundedWidth / 40\n        )\n        .filter((v) => xScale(`${v}`) !== undefined);\n      const xAxisGenerator = (g: any) =>\n        g.call(\n          d3\n            .axisBottom(xScale)\n            .tickValues(xTicks.map((t) => `${t}`))\n            .tickSizeOuter(0)\n        );\n\n      const yExtent = d3.extent(yScale.domain());\n      const yTicks = d3\n        .ticks(yExtent[0] || 0, yExtent[1] || 0, dimensions.boundedHeight / 40)\n        .filter((v) => yScale(v) !== undefined);\n      const yAxisGenerator = (g: any) => {\n        g.call(d3.axisLeft(yScale).tickValues(yTicks)).call((g: any) =>\n          g.select(\".domain\").remove()\n        );\n      };\n\n      svg.select(\".barchart-x-axis\").call(xAxisGenerator);\n      svg.select(\".barchart-y-axis\").call(yAxisGenerator);\n\n      svg\n        .select(\".barchart-bounds\")\n        .attr(\"fill\", `${COLORS.text}`)\n        .selectAll(\".bar\")\n        .data(happinessYears)\n        .join(\"rect\")\n        .attr(\"class\", (d: HappinessYear) => getClass(d, props.year))\n        .attr(\"id\", (d: HappinessYear) => `bar-year-${xAccessor(d)}`)\n\n        .attr(\n          \"x\",\n          (d: HappinessYear) =>\n            Number(xScale(xAccessor(d))) + dimensions.margin.left * 3\n        )\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"y\", (d: HappinessYear) => yScale(Number(yAccessor(d))))\n        .attr(\n          \"height\",\n          (d: HappinessYear) => yScale(0) - yScale(Number(yAccessor(d)))\n        )\n        .on(\"click\", (e: PointerEvent) => {\n          const newYear = (e.target as HTMLElement).id.replace(\"bar-year-\", \"\");\n          props.setYear(newYear);\n          d3.select(\".barchart-bounds\")\n            .selectAll(\".bar\")\n            .data(happinessYears)\n            .attr(\"class\", (d: HappinessYear) => getClass(d, newYear));\n        });\n    },\n    [props.country, happinessYears]\n  );\n\n  if (!props.country) return null;\n\n  return (\n    <>\n      <Heading as=\"h3\" size=\"lg\" color={COLORS.text} className=\"heading\">\n        {props.country}\n      </Heading>\n      <svg\n        ref={svgRef}\n        id=\"barchart-wrapper\"\n        width={dimensions.width}\n        height={dimensions.height}\n      >\n        <g\n          className=\"barchart-bounds\"\n          style={\n            {\n              // transform: `translate(${dimensions.margin.left}px, ${0}px)`,\n            }\n          }\n        />\n        <g\n          className=\"barchart-x-axis\"\n          style={{\n            transform: `translate(${dimensions.margin.left * 3}px, ${\n              dimensions.boundedHeight\n            }px)`,\n            color: `${COLORS.text}`,\n          }}\n        />\n        <g\n          className=\"barchart-y-axis\"\n          style={{\n            transform: `translate(${dimensions.margin.left * 3}px, ${0}px)`,\n            color: `${COLORS.text}`,\n          }}\n        />\n      </svg>\n    </>\n  );\n};\n\nexport default Barchart;\n","import React from \"react\";\nimport { HappinessDataset, HappinessSum } from \"types\";\n\nconst useHappinessSum = (\n  year: string,\n  country: string,\n  data: HappinessDataset\n) => {\n  const [happinessSum, setHappinessSum] = React.useState<HappinessSum>([]);\n\n  React.useEffect(() => {\n    const correctCountry = data[year]?.find((d) => d.Country === country);\n\n    if (correctCountry) {\n      let sum = 0;\n      const components: HappinessSum = [];\n\n      const needed = [\n        \"Economy\",\n        \"Freedom\",\n        \"Generosity\",\n        \"Health\",\n        \"Trust\",\n        year === \"2018\" || year === \"2019\" ? \"Social support\" : \"Family\",\n      ];\n      needed.forEach((n) => {\n        sum += Number(correctCountry[n]);\n      });\n\n      needed.forEach((n) => {\n        components.push({\n          label: n,\n          value: Number(correctCountry[n]) * (sum / 100),\n          original_value: Number(correctCountry[n]),\n        });\n      });\n\n      setHappinessSum(components);\n    }\n  }, [year, country, data]);\n\n  return { happinessSum };\n};\n\nexport default useHappinessSum;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport useHappinessSum from \"hooks/useHappinessSum\";\nimport usePreprocessData from \"hooks/usePreprocessData\";\nimport { Dimensions } from \"types\";\n\nimport \"./Piechart.css\";\nimport { useD3 } from \"hooks/useD3\";\nimport { COLORS } from \"shared/constants\";\nimport { Heading } from \"@chakra-ui/layout\";\n\nconst getDimensions = () => {\n  const chartWidth = window.innerWidth * 0.3;\n  const dimensions: Dimensions = {\n    width: chartWidth,\n    height: chartWidth * 0.5,\n    boundedWidth: 0,\n    boundedHeight: 0,\n    margin: {\n      left: 10,\n      right: 10,\n      top: 10,\n      bottom: 50,\n    },\n  };\n\n  dimensions.boundedWidth =\n    dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight =\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n\n  return dimensions;\n};\n\nconst Piechart = (props: { year: string; country: string }) => {\n  const dimensions = getDimensions();\n\n  const innerRadius = dimensions.boundedHeight * 0.15;\n  const outerRadius = dimensions.boundedHeight * 0.6;\n\n  const metricAccessor = (d: { label: string; value: number }) => d.value;\n\n  const { data } = usePreprocessData();\n\n  const { happinessSum } = useHappinessSum(props.year, props.country, data);\n\n  const svgRef = useD3(\n    (svg: any) => {\n      const colorScale = d3\n        .scaleSequential()\n        .interpolator(d3.interpolateWarm)\n        .domain([0, 5]);\n\n      svg.selectAll(\"path.pie-slice\").remove();\n      svg.selectAll(\"text.heading\").remove();\n      svg.selectAll(\"rect\").remove();\n\n      const arcGenerator = d3\n        .arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .padAngle(0.02)\n        .padRadius(100)\n        .cornerRadius(4);\n      const pieGenerator = d3\n        .pie()\n        .padAngle(0)\n        .value(metricAccessor as any);\n      const arc = svg\n        .selectAll()\n        .data(pieGenerator(happinessSum as any))\n        .enter();\n\n      // Append sectors\n      arc\n        .append(\"path\")\n        .attr(\"d\", arcGenerator)\n        .attr(\"class\", \"pie-slice\")\n        .style(\"fill\", (_: any, i: any) => colorScale(i))\n        .style(\"stroke\", \"#ffffff\")\n        .style(\"stroke-width\", 1)\n        .style(\n          \"transform\",\n          `translate(${dimensions.boundedWidth / 1.5}px, ${\n            dimensions.boundedHeight / 1.5\n          }px)`\n        );\n\n      arc\n        .append(\"rect\") // make a matching color rect\n        .attr(\"width\", 20)\n        .attr(\"height\", 20)\n        .attr(\"y\", (d: any, i: any) => 20 * i * 1.8 + 15)\n        .attr(\"fill\", (_: any, i: any) => {\n          // console.log({ _, i });\n          return colorScale(i);\n        });\n\n      arc\n        .append(\"text\")\n        .text(\n          (d: any) => `${d.data.label} (${d.data.original_value.toFixed(2)})`\n        )\n        .style(\"font-size\", 18)\n        .style(\"font-weight\", 700)\n        .style(\"color\", COLORS.text)\n        .attr(\"class\", \"heading\")\n        .attr(\"y\", (d: any, i: any) => 20 * i * 1.8 + 15 * 2)\n        .attr(\"x\", 30);\n    },\n    [happinessSum]\n  );\n\n  console.log({ happinessSum });\n\n  if (!happinessSum.length) return null;\n\n  return (\n    <>\n      <Heading as=\"h3\" size=\"lg\" color={COLORS.text} className=\"heading\">\n        {props.year}\n      </Heading>\n      <svg\n        ref={svgRef}\n        id=\"piechart-wrapper\"\n        width={dimensions.width}\n        height={dimensions.height}\n      >\n        <g\n          id=\"piechart-legend\"\n          style={\n            {\n              // transform: `translate(${dimensions.boundedWidth / 2}, ${\n              //   dimensions.boundedHeight / 2\n              // })`,\n            }\n          }\n        ></g>\n      </svg>\n    </>\n  );\n};\n\nexport default Piechart;\n","import React from \"react\";\n\nimport Map from \"./components/Map/Map\";\n\nimport \"./App.css\";\n\nimport { ChakraProvider, extendTheme, Flex, Heading } from \"@chakra-ui/react\";\nimport { Box, Stack, StackItem } from \"@chakra-ui/layout\";\nimport Dropdown from \"components/dropdown/Dropdown\";\nimport Barchart from \"components/Barchart/Barchart\";\nimport Piechart from \"components/Piechart/Piechart\";\nimport { COLORS, retroBG } from \"shared/constants\";\n\nconst boxStyles: any = {\n  padding: \"15px 30px\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  borderRadius: \"4px\",\n  backgroundColor: COLORS.primary,\n};\n\nfunction App() {\n  const [year, setYear] = React.useState(\"\");\n  const [country, setCountry] = React.useState(\"\");\n\n  const theme = extendTheme({\n    styles: {\n      global: {\n        \"html, body\": {\n          backgroundColor: COLORS.background,\n          height: \"100%\",\n        },\n        \"#root\": {\n          height: \"100%\",\n        },\n      },\n    },\n  });\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Stack height=\"100%\">\n        <StackItem padding=\"10px 20px\">\n          <Heading\n            color={`${COLORS.text}`}\n            as=\"h1\"\n            size=\"4xl\"\n            textAlign=\"left\"\n            className=\"heading\"\n            fontWeight=\"700\"\n          >\n            World happiness report\n          </Heading>\n        </StackItem>\n        <StackItem padding=\"10px 20px\">\n          <Heading\n            color={`${COLORS.text}`}\n            as=\"h2\"\n            fontSize=\"2xl\"\n            textAlign=\"left\"\n            className=\"heading\"\n          >\n            The World Happiness Report is a landmark survey of the state of\n            global happiness.\n          </Heading>\n        </StackItem>\n        <StackItem flex=\"1\">\n          <Flex width=\"100%\" maxWidth=\"100%\" height=\"100%\" padding=\"10px\">\n            <Box {...boxStyles} margin=\"0px 10px 0px 0px\" flex=\"1\" {...retroBG}>\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <Dropdown onSelect={setYear} passedYear={year} />\n              </Flex>\n              <Map year={year} setCountry={setCountry} />\n            </Box>\n\n            <Stack flex=\"1\">\n              <StackItem {...boxStyles} margin=\"0px\" flex=\"1\" {...retroBG}>\n                <Barchart country={country} year={year} setYear={setYear} />\n              </StackItem>\n              <StackItem\n                {...boxStyles}\n                margin=\"30px 10px 0 10px\"\n                flex=\"1\"\n                {...retroBG}\n              >\n                <Piechart year={year} country={country} />\n              </StackItem>\n            </Stack>\n          </Flex>\n        </StackItem>\n      </Stack>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}